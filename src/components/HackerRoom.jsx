// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: DeadLink (https://sketchfab.com/d43dLink)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/gaming-setup-8a75c64542c14be0ad3dcf75423eda0d
// Title: Gaming Setup
// */
//
// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'
//
// const HackerRoom = (props) => {
//     const { nodes, materials } = useGLTF('/models/hacker-room.glb')
//     return (
//         <group {...props} dispose={null}>
//             <group scale={0.01}>
//                 <mesh
//                     castShadow
//                     receiveShadow
//                     geometry={nodes.Stoo1_Stoo1_0.geometry}
//                     material={materials.Stoo1}
//                 />
//                 <mesh
//                     castShadow
//                     receiveShadow
//                     geometry={nodes.sit_sit_0.geometry}
//                     material={materials.material}
//                 />
//                 <mesh
//                     castShadow
//                     receiveShadow
//                     geometry={nodes.pc_pc_0.geometry}
//                     material={materials.material_2}
//                 />
//                 <mesh
//                     castShadow
//                     receiveShadow
//                     geometry={nodes.pc_pc_0_1.geometry}
//                     material={materials.material_2}
//                 />
//             </group>
//         </group>
//     )
// }
// useGLTF.preload('/models/hacker-room.glb')
//
// export default HackerRoom;


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

import { useGLTF, useTexture } from '@react-three/drei';

const HackerRoom = (props) => {
    const { nodes, materials } = useGLTF('/models/hacker-room.glb');

    const monitortxt = useTexture('textures/desk/monitor.png');
    const screenTxt = useTexture('textures/desk/screen.png');

    return (
        <group {...props} dispose={null}>
            <mesh geometry={nodes.screen_screens_0.geometry} material={materials.screens}>
                <meshMatcapMaterial map={screenTxt} />
            </mesh>
            <mesh geometry={nodes.screen_glass_glass_0.geometry} material={materials.glass} />
            <mesh geometry={nodes.table_table_mat_0_1.geometry} material={materials.table_mat} />
            <mesh geometry={nodes.table_table_mat_0_2.geometry} material={materials.computer_mat}>
                <meshMatcapMaterial map={monitortxt} />
            </mesh>
            <mesh geometry={nodes.table_table_mat_0_3.geometry} material={materials.server_mat} />
            <mesh geometry={nodes.table_table_mat_0_4.geometry} material={materials.vhsPlayer_mat} />
            <mesh geometry={nodes.table_table_mat_0_5.geometry} material={materials.stand_mat} />
            <mesh geometry={nodes.table_table_mat_0_6.geometry} material={materials.mat_mat} />
            <mesh geometry={nodes.table_table_mat_0_7.geometry} material={materials.arm_mat} />
            <mesh geometry={nodes.table_table_mat_0_8.geometry} material={materials.tv_mat}>
                <meshMatcapMaterial map={monitortxt} />
            </mesh>
            <mesh geometry={nodes.table_table_mat_0_9.geometry} material={materials.cables_mat} />
            <mesh geometry={nodes.table_table_mat_0_10.geometry} material={materials.props_mat} />
            <mesh geometry={nodes.table_table_mat_0_11.geometry} material={materials.ground_mat} />
            <mesh geometry={nodes.table_table_mat_0_12.geometry} material={materials.key_mat} />
        </group>
    );
}
useGLTF.preload('/models/hacker-room.glb')

export default HackerRoom;
